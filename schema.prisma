generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"

}

model User {
    id        String    @id @default(cuid())
    userId  String    @unique
    activities Activity[]
    firstName String?
    lastName String?
    imageUrl String?
    createdAt     DateTime @default(now())
    teams Team[] @relation("UserTeam")
    accessToken String?
    refreshToken String?
    currentTeam Team? @relation("CurrentUserTeam", fields: [currentTeamId], references: [id])
    currentTeamId String?
    hasConnected Boolean @default(false)
    @@index([currentTeamId])
}



model Activity {
    id        String    @id @default(cuid())
    activityId  String    @unique
    user    User    @relation(fields: [userId], references: [userId])
    userId  String
    @@index([userId])
    type String?
    startDate DateTime?
    startLatLng Json?
    distance Float?
    movingTime Int?
    elevHigh Float?
    elevLow Float?
    elapsedTime Int?
    kudosCount Int?
    averageSpeed Float?
    maxSpeed Float?
    calories Float?
    averageWatts Float?
    kilojoules Float?
    maxWatts Float?
    photosCount Int?
    photo String?
}

model Feedback {
    id           String    @id @default(cuid())
    content      String
    createdAt    DateTime @default(now())
    votes Vote[]
}

model Vote { 
  createdAt    DateTime @default(now())
  feedback     Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId   String
  @@index([feedbackId])
  anonymousId  String @default(cuid())
  @@id([feedbackId, anonymousId])
}

model Team {
    id           String    @id @default(cuid())
    slug         String @unique
    name         String @unique
    imageUrl     String?
    createdAt    DateTime @default(now())
    members      User[] @relation("UserTeam")
    currentTeamMembers User[] @relation("CurrentUserTeam")
}